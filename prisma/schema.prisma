// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  name     String
  password String

  posts          Post[]
  managedIssues  Issue[]   @relation("IssueManager")
  reportedIssues Issue[]   @relation("IssueReporter")
  projects       Project[]
  comments       Comment[]
  likes          Like[]

  projectsAsManager Project[] @relation("Manager")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id      Int     @id @default(autoincrement())
  title   String
  content String?

  authorId Int
  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  managerId Int
  manager   User @relation("Manager", fields: [managerId], references: [id])

  issues   Issue[]
  users    User[]
  hashTags HashTag[] @relation("ProjectHashTag")

  iconId Int?
  Icon   Icon? @relation(fields: [iconId], references: [id])

  startDate DateTime?
  endDate   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Issue {
  id          Int     @id @default(autoincrement())
  summary     String
  description String?

  // 이슈의 타입 (버그, 기능, 개선, ...)
  issueTypeId Int
  issueType   IssueType @relation(fields: [issueTypeId], references: [id])

  // 해당 이슈가 속한 프로젝트
  projectId Int
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // 해당 이슈를 관리하는 사용자
  managerId Int?
  manager   User? @relation("IssueManager", fields: [managerId], references: [id])

  // 해당 이슈를 생성하고 업로드한 사용자
  reporterId Int?
  reporter   User? @relation("IssueReporter", fields: [reporterId], references: [id])

  likes   Like[]
  comments Comment[]
  hashTags HashTag[] @relation("IssueHashTag")

  startDate DateTime?
  endDate   DateTime?
  dueDate   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model IssueType {
  id   Int    @id @default(autoincrement())
  name String

  iconId Int
  icon   Icon @relation(fields: [iconId], references: [id])

  Issue Issue[]
}

model Icon {
  id   Int    @id @default(autoincrement())
  name String
  uri  String

  Project   Project[]
  IssueType IssueType[]
}

model CustomField {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  content     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id      Int    @id @default(autoincrement())
  content String

  authorId Int
  author   User @relation(fields: [authorId], references: [id])

  IssueId Int
  Issue   Issue @relation(fields: [IssueId], references: [id])

  likes Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HashTag {
  id   Int    @id @default(autoincrement())
  name String

  issues   Issue[]   @relation("IssueHashTag")
  projects Project[] @relation("ProjectHashTag")
}

model Like {
  id      Int    @id @default(autoincrement())

  user  User  @relation(fields: [userId], references: [id])
  userId  Int

  issue Issue @relation(fields: [issueId], references: [id])
  issueId Int

  comment Comment @relation(fields: [commentId], references: [id])
  commentId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
