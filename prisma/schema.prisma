// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique // 이메일
  name     String // 이름
  password String // 비밀번호
  avatar   String? // 프로필 사진

  posts          Post[]
  managedIssues  Issue[]        @relation("IssueManager")
  reportedIssues Issue[]        @relation("IssueReporter")
  projects       Project[]
  comments       Comment[]
  issueLikes     Issue_Like[]
  commentLikes   Comment_Like[]
  chats          Chat[]
  chatMessages   Chat_Message[]

  projectsAsManager Project[] @relation("Manager")

  birthDate DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Post {
  id      Int     @id @default(autoincrement())
  title   String
  content String?

  authorId Int
  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  managerId Int
  manager   User @relation("Manager", fields: [managerId], references: [id])

  issues   Issue[]
  users    User[]
  hashTags HashTag[] @relation("ProjectHashTag")

  iconId Int?
  Icon   Icon? @relation(fields: [iconId], references: [id])

  startDate DateTime?
  endDate   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Issue {
  id          Int     @id @default(autoincrement())
  keyName     String // 이슈에 대한 키값 (ex. PROJECT-1) 
  summary     String
  description String?

  priority Int @default(3) // 우선순위 (1: Lowest, 2: Low, 3: Medium, 4: High, 5: Highest)

  // 이슈의 타입 (버그, 기능, 개선, ...)
  issueTypeId Int
  issueType   IssueType @relation(fields: [issueTypeId], references: [id])

  // 해당 이슈가 속한 프로젝트
  projectId Int
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // 해당 이슈를 관리하는 사용자
  managerId Int?
  manager   User? @relation("IssueManager", fields: [managerId], references: [id])

  // 해당 이슈를 생성하고 업로드한 사용자
  reporterId Int?
  reporter   User? @relation("IssueReporter", fields: [reporterId], references: [id])

  likes    Issue_Like[]
  comments Comment[]
  hashTags HashTag[]    @relation("IssueHashTag")

  startDate DateTime?
  endDate   DateTime?
  dueDate   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model IssueType {
  id   Int    @id @default(autoincrement())
  name String

  iconId Int
  icon   Icon @relation(fields: [iconId], references: [id])

  Issue Issue[]
}

model Icon {
  id   Int    @id @default(autoincrement())
  name String
  uri  String

  Project   Project[]
  IssueType IssueType[]
}

model CustomField {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  content     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id      Int    @id @default(autoincrement())
  content String

  authorId Int
  author   User @relation(fields: [authorId], references: [id])

  IssueId Int
  Issue   Issue @relation(fields: [IssueId], references: [id])

  likes Comment_Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 해쉬태그 모델
model HashTag {
  id   Int    @id @default(autoincrement())
  name String @unique// 해쉬태그 이름

  issues   Issue[]   @relation("IssueHashTag") // 해당 해쉬태그를 가지고 있는 이슈들
  projects Project[] @relation("ProjectHashTag") // 해당 해쉬태그를 가지고 있는 프로젝트들
}

// 이슈에 대한 '좋아요' 모델
model Issue_Like {
  id Int @id @default(autoincrement())

  issue   Issue? @relation(fields: [issueId], references: [id])
  issueId Int?

  user   User @relation(fields: [userId], references: [id])
  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 코멘트에 대한 '좋아요' 모델
model Comment_Like {
  id Int @id @default(autoincrement())

  comment   Comment @relation(fields: [commentId], references: [id])
  commentId Int

  user   User @relation(fields: [userId], references: [id])
  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 사용자들 간의 채팅방 모델
model Chat {
  id Int @id @default(autoincrement())

  // 채팅방에 참여하는 사용자들
  users User[]

  // 채팅방에 속한 메시지들
  messages Chat_Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 사용자들이 채팅방에서 작성한 메시지 모델
model Chat_Message {
  id Int @id @default(autoincrement())

  // 메시지를 보낸 사용자
  senderId Int
  sender User @relation(fields: [senderId], references: [id])

  // 메시지가 속한 채팅방
  chatId Int
  chat Chat @relation(fields: [chatId], references: [id])

  // 메시지 내용
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model Chat_Message_React {
//   id Int @id @default(autoincrement())

//   // 리액션을 보낸 사용자
//   userId Int
//   user User @relation(fields: [userId], references: [id])

//   // 리액션을 보낸 메시지
//   messageId Int
//   message Chat_Message @relation(fields: [messageId], references: [id])

//   // 리액션 타입
//   type String

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }